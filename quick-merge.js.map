{"version":3,"sources":["webpack:///./docs/pages/quick-merge.md"],"names":["_path","_interopRequireDefault","__webpack_require__","_react","_interopRequireWildcard","Link","props","to","rest","_objectWithoutProperties","includes","default","createElement","_extends","href","path","join","onClick","e","preventDefault","location","URL","window","origin","history","pushState","Location","pathname","hash","query","getLocation","popStateEvent","CustomEvent","detail","dispatchEvent","defaultProps","lazyComponent","provider","_class","_temp","React","Component","[object Object]","args","super","_defineProperty","this","Comp","componentDidMount","state","shouldLoad","then","c","setState","render","children","bind","_jsx","className","_ref3","_ref4","_ref5","_ref6","_ref7","id","_ref8","currentPage","aria-hidden","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14"],"mappings":"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","file":"quick-merge.js","sourcesContent":["\n      \n      import path from 'path';\n      import React, { Component } from 'react';\n      import makeClass from 'classnames';\n\n      \n  import PropTypes from 'prop-types';\n\n  const getLocation = Location => ({\n    href: Location.href,\n    pathname: Location.pathname,\n    hash: Location.hash,\n    query: Location.query\n  });\n\n  const Link = props => {\n    let {to, ...rest} = props;\n\n    if (to.includes('http')) {\n      return <a {...props} href={to} />\n    }\n\n    if (to[0] === '#') {\n      to = path.join('/auto/','pages/quick-merge.html') + to;\n    }\n\n    return (\n      <a\n        {...rest}\n        href={to}\n        onClick={e => {\n          e.preventDefault();\n\n          if (props.to === '#') {\n            return false;\n          }\n\n          const location = new URL(path.join(window.location.origin, to))\n\n          window.history.pushState(getLocation(location), null, to);\n          props.onClick();\n\n          const popStateEvent = new CustomEvent('changeLocation', { detail: location });\n          dispatchEvent(popStateEvent);\n\n          return false;\n        }}\n      />\n    );\n  };\n\n  Link.defaultProps = {\n    href: '',\n    onClick: () => {}\n  };\n\n  Link.propTypes = {\n    href: PropTypes.string,\n    onClick: PropTypes.func\n  }\n\n      \n  const PluginProvider = ({plugins, name, options, children, ...props}) => {\n    let Plugin = plugins[name];\n    const pluginOptions = Plugin.options;\n\n    if (!Plugin) {\n      return <div />;\n    }\n\n    Plugin = Plugin.component;\n    return (\n      <Plugin\n        {...pluginOptions} \n        options={options ? options.options : {}}\n        {...(options ? options.props : props)}\n        children={children}\n        plugins={plugins}\n      />\n    );\n  };\n\n      \n  class Details extends Component {\n    state = {\n      open: this.props.open\n    }\n\n    render() {\n      return (\n        <details open={this.state.open}>\n          {this.props.children}\n        </details>\n      )\n    }\n  };\n\n      \n      \n    import IdealImage from 'react-ideal-image';\n\n    const imageSources = {  };\n\n    class LazyImageComponent extends React.Component {\n      state = {\n        image: null,\n        ImageProvider: imageSources[this.props.src]\n      }\n\n      componentDidMount() {\n        if (!this.state.image) {\n          this.state.ImageProvider().then(c => {\n            this.setState({\n              image: c.default\n            });\n          });\n        }\n      }\n\n      render() {\n        let { image } = this.state;\n\n        return image && typeof image === 'object' ? (\n          <IdealImage\n            {...this.props}\n            className={makeClass('image', this.props.className)}\n            src={image.src.src}\n            width={image.src.width || image.width}\n            height={image.src.height || image.height}\n            placeholder={{ lqip: image.preSrc }}\n            srcSet={image.src.images\n              ? image.src.images.map(i => ({\n                  ...i,\n                  src: i.path\n                }))\n              : [{\n                  src: image.src,\n                  width: image.width\n                }]\n            }\n          />\n        ) : <img className={makeClass('image', this.props.className)} src={image} />;\n      }\n    }\n  \n      \n  const lazyComponent = provider =>\n    class extends React.Component {\n      static defaultProps = {\n        shouldLoad: true\n      };\n  \n      state = {\n        Comp: null\n      };\n  \n      componentDidMount() {\n        if (!this.state.Comp && this.props.shouldLoad) {\n          provider().then(c => {\n            this.setState({\n              Comp: c.default\n            });\n          });\n        }\n      }\n  \n      render() {\n        const { Comp } = this.state;\n        return Comp ? React.createElement(Comp, this.props, this.props.children || null) : null;\n      }\n    };\n\n\n      const Gist = lazyComponent(() => import(/* webpackChunkName: \"plugin-embed\" */ 'react-gist'))\n      const TweetEmbed = lazyComponent(() => import(/* webpackChunkName: \"plugin-embed\" */ 'react-tweet-embed'))\n    \n      \n    const markDownPage = props => (\n      <div className={props.className}>\n        <section>\n          <h1>Merging Quickly</h1>\n<p>One caveat of <code>auto</code> is that you need to be mindful of merging multiple PRs at once. You <strong>must not</strong> merge a PR while another is publishing (ex: <code>lerna publish</code>). While this window is small, it exists and you should know about it.</p>\n<p><code>auto</code> works by looking at the <code>git</code> tree to calculate the version bump then makes commits for the <code>CHANGELOG.md</code> and the new version. If you merge a PR while another is publishing:</p>\n<ul>\n<li>they might try to publish the same version number</li>\n<li>one will try to push over the other's changes and fail</li>\n</ul>\n\n        <article className=\"message column is-success\">\n          \n          <div className=\"message-body\">\n      <p>If you ensure that the last build on master has finished you shouldn't run into any problems!</p>\n\n        </div>\n      </article>\n    <h2 id=\"with-skip-release\">With <code>skip-release</code> <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#with-skip-release\" aria-hidden=\"true\"></Link></h2>\n<p>The one exception to this rule with when merging a bunch of PRs with <code>skip-release</code> labels.</p>\n<p>You still can't merge a PR that triggers a release and then merge a PR with <code>skip-release</code>. This will result in problem 3 from above.</p>\n<pre><code className=\"language-txt\">1. Merge PR #4 \"patch\"<br />2. Merge PR #5 \"skip-release\"<br /><br />Result: #4 tries to push commits over #5 and fails<br /></code></pre>\n<p>But you can merge a bunch of PRs with <code>skip-release</code> then merge a PR that triggers a release.</p>\n<pre><code className=\"language-txt\">1. Merge PR #4 \"skip-release\"<br />2. Merge PR #5 \"skip-release\"<br />3. Merge PR #7 \"patch\"<br /><br />Result: 1 \"patch\" released w/all PRs<br /></code></pre>\n<p>Because <code>skip-release</code> is present no commits are made and the release is fine!</p>\n\n        </section>\n      </div>\n    );\n\n    export default markDownPage;\n  \n    "],"sourceRoot":""}