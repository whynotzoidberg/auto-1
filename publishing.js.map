{"version":3,"sources":["webpack:///./docs/pages/publishing.md"],"names":["_path","_interopRequireDefault","__webpack_require__","_react","_interopRequireWildcard","Link","props","to","rest","_objectWithoutProperties","includes","default","createElement","_extends","href","path","join","onClick","e","preventDefault","location","URL","window","origin","history","pushState","Location","pathname","hash","query","getLocation","popStateEvent","CustomEvent","detail","dispatchEvent","defaultProps","lazyComponent","provider","_class","_temp","React","Component","[object Object]","args","super","_defineProperty","this","Comp","componentDidMount","state","shouldLoad","then","c","setState","render","children","bind","_jsx","className","_ref3","_ref4","_ref5","_ref6","id","currentPage","aria-hidden","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15"],"mappings":"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","file":"publishing.js","sourcesContent":["\n      \n      import path from 'path';\n      import React, { Component } from 'react';\n      import makeClass from 'classnames';\n\n      \n  import PropTypes from 'prop-types';\n\n  const getLocation = Location => ({\n    href: Location.href,\n    pathname: Location.pathname,\n    hash: Location.hash,\n    query: Location.query\n  });\n\n  const Link = props => {\n    let {to, ...rest} = props;\n\n    if (to.includes('http')) {\n      return <a {...props} href={to} />\n    }\n\n    if (to[0] === '#') {\n      to = path.join('/auto/','pages/publishing.html') + to;\n    }\n\n    return (\n      <a\n        {...rest}\n        href={to}\n        onClick={e => {\n          e.preventDefault();\n\n          if (props.to === '#') {\n            return false;\n          }\n\n          const location = new URL(path.join(window.location.origin, to))\n\n          window.history.pushState(getLocation(location), null, to);\n          props.onClick();\n\n          const popStateEvent = new CustomEvent('changeLocation', { detail: location });\n          dispatchEvent(popStateEvent);\n\n          return false;\n        }}\n      />\n    );\n  };\n\n  Link.defaultProps = {\n    href: '',\n    onClick: () => {}\n  };\n\n  Link.propTypes = {\n    href: PropTypes.string,\n    onClick: PropTypes.func\n  }\n\n      \n  const PluginProvider = ({plugins, name, options, children, ...props}) => {\n    let Plugin = plugins[name];\n    const pluginOptions = Plugin.options;\n\n    if (!Plugin) {\n      return <div />;\n    }\n\n    Plugin = Plugin.component;\n    return (\n      <Plugin\n        {...pluginOptions} \n        options={options ? options.options : {}}\n        {...(options ? options.props : props)}\n        children={children}\n        plugins={plugins}\n      />\n    );\n  };\n\n      \n  class Details extends Component {\n    state = {\n      open: this.props.open\n    }\n\n    render() {\n      return (\n        <details open={this.state.open}>\n          {this.props.children}\n        </details>\n      )\n    }\n  };\n\n      \n      \n    import IdealImage from 'react-ideal-image';\n\n    const imageSources = {  };\n\n    class LazyImageComponent extends React.Component {\n      state = {\n        image: null,\n        ImageProvider: imageSources[this.props.src]\n      }\n\n      componentDidMount() {\n        if (!this.state.image) {\n          this.state.ImageProvider().then(c => {\n            this.setState({\n              image: c.default\n            });\n          });\n        }\n      }\n\n      render() {\n        let { image } = this.state;\n\n        return image && typeof image === 'object' ? (\n          <IdealImage\n            {...this.props}\n            className={makeClass('image', this.props.className)}\n            src={image.src.src}\n            width={image.src.width || image.width}\n            height={image.src.height || image.height}\n            placeholder={{ lqip: image.preSrc }}\n            srcSet={image.src.images\n              ? image.src.images.map(i => ({\n                  ...i,\n                  src: i.path\n                }))\n              : [{\n                  src: image.src,\n                  width: image.width\n                }]\n            }\n          />\n        ) : <img className={makeClass('image', this.props.className)} src={image} />;\n      }\n    }\n  \n      \n  const lazyComponent = provider =>\n    class extends React.Component {\n      static defaultProps = {\n        shouldLoad: true\n      };\n  \n      state = {\n        Comp: null\n      };\n  \n      componentDidMount() {\n        if (!this.state.Comp && this.props.shouldLoad) {\n          provider().then(c => {\n            this.setState({\n              Comp: c.default\n            });\n          });\n        }\n      }\n  \n      render() {\n        const { Comp } = this.state;\n        return Comp ? React.createElement(Comp, this.props, this.props.children || null) : null;\n      }\n    };\n\n\n      const Gist = lazyComponent(() => import(/* webpackChunkName: \"plugin-embed\" */ 'react-gist'))\n      const TweetEmbed = lazyComponent(() => import(/* webpackChunkName: \"plugin-embed\" */ 'react-tweet-embed'))\n    \n      \n    const markDownPage = props => (\n      <div className={props.className}>\n        <section>\n          <h1>Publishing</h1>\n<p><code>auto</code>'s main use it to automate the release process for your project. This can be broken down into three core steps:</p>\n<pre><code className=\"language-text\">pre: (optional) Check if new version<br /><br />1. Generate CHANGELOG.md<br />2. Publish code<br />3. Generate github release notes<br /></code></pre>\n<p><code>auto</code> makes no assumptions about your publishing process. Each tool is a function that can be run in isolation and only does one thing really well. For instance, you could just use <code>auto changelog</code> to generate the changelog and nothing else or use <code>auto version</code> to calculate just the semver bump.</p>\n<h2 id=\"base-branch\">Base Branch <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#base-branch\" aria-hidden=\"true\"></Link></h2>\n<p>By default <code>auto</code> assumes that your repo's base branch is <code>master</code>. You can configure this behavior through the <Link currentPage={(this && this.props || props).currentPage} to=\"/auto/pages/autorc.html#base-branch\">.autorc</Link> or via a CLI to any relevant command.</p>\n<pre><code className=\"language-sh\">auto shipit --base-branch trunk<br /></code></pre>\n<h2 id=\"push-to-base-branch\">Push to base branch <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#push-to-base-branch\" aria-hidden=\"true\"></Link></h2>\n<p>If you push commits to the base branch they will count as patches. This is a good way to get a release out without having to make a PR.</p>\n<p>The changelog entry will contain the first line of the commit message. These commits will fall under a special section in the changelog.</p>\n<p>ex:</p>\n<pre><code className=\"language-md\">⚠️ Pushed to master<br /><br /><span className=\"hljs-bullet\">- </span>fix docs publishing ([<span className=\"hljs-string\">@lisowski54@gmail.com</span>](<span className=\"hljs-link\">https://github.com/lisowski54@gmail.com</span>))<br /></code></pre>\n<p>You can configure the title of this changelog entry by adding the <code>pushToBaseBranch</code> label in your config.</p>\n<pre><code className=\"language-json\">&#123;<br />  <span className=\"hljs-attr\">\"labels\"</span>: [<br />    &#123;<br />      <span className=\"hljs-attr\">\"name\"</span>: <span className=\"hljs-string\">\"pushToBaseBranch\"</span>,<br />      <span className=\"hljs-attr\">\"changelogTitle\"</span>: <span className=\"hljs-string\">\"Emergency!!\"</span><br />    &#125;<br />  ]<br />&#125;<br /></code></pre>\n\n        </section>\n      </div>\n    );\n\n    export default markDownPage;\n  \n    "],"sourceRoot":""}