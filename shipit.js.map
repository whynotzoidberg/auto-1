{"version":3,"sources":["webpack:///./docs/pages/extras/shipit.md","webpack:///./docs/pages/generated/shipit.md"],"names":["_path","_interopRequireDefault","__webpack_require__","_react","_interopRequireWildcard","_classnames","_reactIdealImage","Link","props","to","rest","_objectWithoutProperties","includes","default","createElement","_extends","href","path","join","onClick","e","preventDefault","location","URL","window","origin","history","pushState","Location","pathname","hash","query","getLocation","popStateEvent","CustomEvent","detail","dispatchEvent","defaultProps","imageSources","../../images/default-auto.png","then","t","bind","../../images/complete-auto.png","../../images/next-branch.png","LazyImageComponent","React","Component","[object Object]","args","super","_defineProperty","this","image","ImageProvider","src","componentDidMount","state","c","setState","render","className","width","height","placeholder","lqip","preSrc","srcSet","images","map","i","_objectSpread","_jsx","lazyComponent","provider","_class","_temp","Comp","shouldLoad","children","alt","id","currentPage","aria-hidden","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","_ref20","_ref21","_ref22","_ref23","_ref24","_ref25","_ref26","_ref27","_ref28","_ref29","_ref30","_ref31","_ref32","_ref33","_ref34","_ref35","_ref36","_ref37","_ref38"],"mappings":"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","file":"shipit.js","sourcesContent":["\n      \n      import path from 'path';\n      import React, { Component } from 'react';\n      import makeClass from 'classnames';\n\n      \n  import PropTypes from 'prop-types';\n\n  const getLocation = Location => ({\n    href: Location.href,\n    pathname: Location.pathname,\n    hash: Location.hash,\n    query: Location.query\n  });\n\n  const Link = props => {\n    let {to, ...rest} = props;\n\n    if (to.includes('http')) {\n      return <a {...props} href={to} />\n    }\n\n    if (to[0] === '#') {\n      to = path.join('/auto/','pages/extras/shipit.html') + to;\n    }\n\n    return (\n      <a\n        {...rest}\n        href={to}\n        onClick={e => {\n          e.preventDefault();\n\n          if (props.to === '#') {\n            return false;\n          }\n\n          const location = new URL(path.join(window.location.origin, to))\n\n          window.history.pushState(getLocation(location), null, to);\n          props.onClick();\n\n          const popStateEvent = new CustomEvent('changeLocation', { detail: location });\n          dispatchEvent(popStateEvent);\n\n          return false;\n        }}\n      />\n    );\n  };\n\n  Link.defaultProps = {\n    href: '',\n    onClick: () => {}\n  };\n\n  Link.propTypes = {\n    href: PropTypes.string,\n    onClick: PropTypes.func\n  }\n\n      \n  const PluginProvider = ({plugins, name, options, children, ...props}) => {\n    let Plugin = plugins[name];\n    const pluginOptions = Plugin.options;\n\n    if (!Plugin) {\n      return <div />;\n    }\n\n    Plugin = Plugin.component;\n    return (\n      <Plugin\n        {...pluginOptions} \n        options={options ? options.options : {}}\n        {...(options ? options.props : props)}\n        children={children}\n        plugins={plugins}\n      />\n    );\n  };\n\n      \n  class Details extends Component {\n    state = {\n      open: this.props.open\n    }\n\n    render() {\n      return (\n        <details open={this.state.open}>\n          {this.props.children}\n        </details>\n      )\n    }\n  };\n\n      \n      \n    import IdealImage from 'react-ideal-image';\n\n    const imageSources = { \n      '../../images/default-auto.png': () => import(\n        /* webpackChunkName: \"image-default-auto.png\" */\n        '../.././images/default-auto.png'\n      )\n    ,\n      '../../images/complete-auto.png': () => import(\n        /* webpackChunkName: \"image-complete-auto.png\" */\n        '../.././images/complete-auto.png'\n      )\n    ,\n      '../../images/next-branch.png': () => import(\n        /* webpackChunkName: \"image-next-branch.png\" */\n        '../.././images/next-branch.png'\n      )\n     };\n\n    class LazyImageComponent extends React.Component {\n      state = {\n        image: null,\n        ImageProvider: imageSources[this.props.src]\n      }\n\n      componentDidMount() {\n        if (!this.state.image) {\n          this.state.ImageProvider().then(c => {\n            this.setState({\n              image: c.default\n            });\n          });\n        }\n      }\n\n      render() {\n        let { image } = this.state;\n\n        return image && typeof image === 'object' ? (\n          <IdealImage\n            {...this.props}\n            className={makeClass('image', this.props.className)}\n            src={image.src.src}\n            width={image.src.width || image.width}\n            height={image.src.height || image.height}\n            placeholder={{ lqip: image.preSrc }}\n            srcSet={image.src.images\n              ? image.src.images.map(i => ({\n                  ...i,\n                  src: i.path\n                }))\n              : [{\n                  src: image.src,\n                  width: image.width\n                }]\n            }\n          />\n        ) : <img className={makeClass('image', this.props.className)} src={image} />;\n      }\n    }\n  \n      \n  const lazyComponent = provider =>\n    class extends React.Component {\n      static defaultProps = {\n        shouldLoad: true\n      };\n  \n      state = {\n        Comp: null\n      };\n  \n      componentDidMount() {\n        if (!this.state.Comp && this.props.shouldLoad) {\n          provider().then(c => {\n            this.setState({\n              Comp: c.default\n            });\n          });\n        }\n      }\n  \n      render() {\n        const { Comp } = this.state;\n        return Comp ? React.createElement(Comp, this.props, this.props.children || null) : null;\n      }\n    };\n\n\n      const Gist = lazyComponent(() => import(/* webpackChunkName: \"plugin-embed\" */ 'react-gist'))\n      const TweetEmbed = lazyComponent(() => import(/* webpackChunkName: \"plugin-embed\" */ 'react-tweet-embed'))\n    \n      \n    const markDownPage = props => (\n      <div className={props.className}>\n        <section>\n          <h2 id=\"release-pipeline\">Release Pipeline <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#release-pipeline\" aria-hidden=\"true\"></Link></h2>\n<p>Below is the basics steps auto takes when releasing your code through the <code>shipit</code> command.</p>\n<p><LazyImageComponent src=\"../../images/default-auto.png\" alt=\"The default shipit workflow\" /></p>\n<p>You can customize how this pipeline operates with various flags.\nThe following shows how those flags can effect the workflow.</p>\n<p><LazyImageComponent src=\"../../images/complete-auto.png\" alt=\"The entire shipit workflow\" /></p>\n<h2 id=\"managing-old-major-versions\">Managing Old Major Versions <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#managing-old-major-versions\" aria-hidden=\"true\"></Link></h2>\n<p>This command also has the ability to help you manage old major versions too!\nThis feature is off by default, to enable set <code>versionBranches</code> to <code>true</code> in your <Link currentPage={(this && this.props || props).currentPage} to=\"/auto/pages/autorc.html#versionbranches\">.autorc</Link>.</p>\n<p>With this feature enabled <code>auto shipit</code> will:</p>\n<ul>\n<li>Create a version branch when a <code>major</code> happens (prefixed with <code>version-</code>)</li>\n<li>When ran from a <code>versionBranch</code> make a release to that version</li>\n</ul>\n<p>Now that you have a branch for an old major release, it is super easy to release patches to it!\nPeople can make PRs to the the <code>version-</code> branch and once merged create a new release of that version.</p>\n<h3 id=\"customize-branch-prefix\">Customize Branch Prefix <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#customize-branch-prefix\" aria-hidden=\"true\"></Link></h3>\n<p>You can customize what the branch names will be by setting <code>versionBranches</code> to a string.</p>\n<pre><code className=\"language-json\">&#123;<br />  <span className=\"hljs-attr\">\"versionBranches\"</span>: <span className=\"hljs-string\">\"Major-\"</span><br />&#125;<br /></code></pre>\n<h2 id=\"prereleases\">Prereleases <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#prereleases\" aria-hidden=\"true\"></Link></h2>\n<p>If you are interested in pre-releases (ex: <code>alpha</code>, <code>beta</code>, <code>next</code>) <code>auto</code> has the ability to publish pre-releases in various ways.</p>\n<p>Read more about preparing you project for pre-releases <Link currentPage={(this && this.props || props).currentPage} to=\"/auto/pages/generated/next.html#setting-up-protected-branches\">here</Link>.</p>\n<h3 id=\"strategies\">Strategies <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#strategies\" aria-hidden=\"true\"></Link></h3>\n<h4 id=\"%22next%22-branch-(default)\">&quot;next&quot; Branch (default) <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#%22next%22-branch-(default)\" aria-hidden=\"true\"></Link></h4>\n<p>The suggested way to create pre-releases is by managing 2 branches for your repo: <code>master</code> and <code>next</code>.\n<code>master</code> contains the <code>latest</code> stable version of the code, and <code>next</code> contains future updates.</p>\n<p>You can change what branches <code>auto</code> treats as pre-release branches in your <Link currentPage={(this && this.props || props).currentPage} to=\"/auto/pages/autorc.html#prerelease-branches\"><code>.autorc</code></Link>.</p>\n<p><LazyImageComponent src=\"../../images/next-branch.png\" alt=\"Example git tree\" /></p>\n<p>To update the <code>latest</code> stable version simply merge your pre-release branch into your <code>baseBranch</code>.</p>\n<h4 id=\"without-%22next%22-branch-(--only-graduate-with-release-label)\">Without &quot;next&quot; Branch (<code>--only-graduate-with-release-label</code>) <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#without-%22next%22-branch-(--only-graduate-with-release-label)\" aria-hidden=\"true\"></Link></h4>\n<p>If you use the <code>--only-graduate-with-release-label</code> flag, you do not have to manage 2 branches.\nInstead you only have a <code>baseBranch</code> and do all work and pull requests there.\n<code>auto</code> will only publish pre-releases when PRs are merged.\nTo update the <code>latest</code> stable version add the <code>released</code> label to the PR.</p>\n<p>While this setup may be simpler, it restricts you from updating latest while development is happening for the pre-release.\nWith 2 branches you can easily merge update to the latest release, with 1 this is not possible.</p>\n<h4 id=\"multiple-%22next%22-branches\">Multiple &quot;next&quot; Branches <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#multiple-%22next%22-branches\" aria-hidden=\"true\"></Link></h4>\n<p>Sometimes you might want to have more rigorous release lines.\nThis can help test out bugs on a smaller set of users.</p>\n<p>One setup you could use to accomplish this is by creating 3 <code>prereleaseBranches</code></p>\n<pre><code className=\"language-json\">&#123;<br />  <span className=\"hljs-attr\">\"prereleaseBranches\"</span>: [<span className=\"hljs-string\">\"alpha\"</span>, <span className=\"hljs-string\">\"beta\"</span>, <span className=\"hljs-string\">\"rc\"</span>]<br />&#125;<br /></code></pre>\n<p>You could then set you default to <code>alpha</code> and <code>auto</code> would publish updates merged to that branch under the <code>alpha</code> release tag.\nWhen you are ready for the update to get used by more users just merge <code>alpha</code> into <code>beta</code>.\nThis will publish a <code>beta</code> release to the matching release tag.\nRepeat this same process when graduating to <code>rc</code> or <code>latest</code>.</p>\n<h4 id=\"feature-pre-releases\">Feature Pre-releases <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#feature-pre-releases\" aria-hidden=\"true\"></Link></h4>\n<p>Sometimes you are working on a large feature that requires a lot of work.\nInstead of making a giant PR with a bunch of updates, you can create a <code>prereleaseBranch</code> to track the work.</p>\n<pre><code className=\"language-json\">&#123;<br />  <span className=\"hljs-attr\">\"prereleaseBranches\"</span>: [<span className=\"hljs-string\">\"next\"</span>, <span className=\"hljs-string\">\"my-cool-feature\"</span>]<br />&#125;<br /></code></pre>\n<p>Now instead of just getting a canary version when merging into the <code>my-cool-feature</code> branch, a prerelease version is published under the <code>my-cool-feature</code> release tag!\nThis enables other to consume just this line of work and enables your work to be more flexible.</p>\n\n        </section>\n      </div>\n    );\n\n    export default markDownPage;\n  \n    ","\n      \n      import path from 'path';\n      import React, { Component } from 'react';\n      import makeClass from 'classnames';\n\n      \n  import PropTypes from 'prop-types';\n\n  const getLocation = Location => ({\n    href: Location.href,\n    pathname: Location.pathname,\n    hash: Location.hash,\n    query: Location.query\n  });\n\n  const Link = props => {\n    let {to, ...rest} = props;\n\n    if (to.includes('http')) {\n      return <a {...props} href={to} />\n    }\n\n    if (to[0] === '#') {\n      to = path.join('/auto/','pages/generated/shipit.html') + to;\n    }\n\n    return (\n      <a\n        {...rest}\n        href={to}\n        onClick={e => {\n          e.preventDefault();\n\n          if (props.to === '#') {\n            return false;\n          }\n\n          const location = new URL(path.join(window.location.origin, to))\n\n          window.history.pushState(getLocation(location), null, to);\n          props.onClick();\n\n          const popStateEvent = new CustomEvent('changeLocation', { detail: location });\n          dispatchEvent(popStateEvent);\n\n          return false;\n        }}\n      />\n    );\n  };\n\n  Link.defaultProps = {\n    href: '',\n    onClick: () => {}\n  };\n\n  Link.propTypes = {\n    href: PropTypes.string,\n    onClick: PropTypes.func\n  }\n\n      \n  const PluginProvider = ({plugins, name, options, children, ...props}) => {\n    let Plugin = plugins[name];\n    const pluginOptions = Plugin.options;\n\n    if (!Plugin) {\n      return <div />;\n    }\n\n    Plugin = Plugin.component;\n    return (\n      <Plugin\n        {...pluginOptions} \n        options={options ? options.options : {}}\n        {...(options ? options.props : props)}\n        children={children}\n        plugins={plugins}\n      />\n    );\n  };\n\n      \n  class Details extends Component {\n    state = {\n      open: this.props.open\n    }\n\n    render() {\n      return (\n        <details open={this.state.open}>\n          {this.props.children}\n        </details>\n      )\n    }\n  };\n\n      \n      \n    import IdealImage from 'react-ideal-image';\n\n    const imageSources = { \n      '../../images/default-auto.png': () => import(\n        /* webpackChunkName: \"image-default-auto.png\" */\n        '../.././images/default-auto.png'\n      )\n    ,\n      '../../images/complete-auto.png': () => import(\n        /* webpackChunkName: \"image-complete-auto.png\" */\n        '../.././images/complete-auto.png'\n      )\n    ,\n      '../../images/next-branch.png': () => import(\n        /* webpackChunkName: \"image-next-branch.png\" */\n        '../.././images/next-branch.png'\n      )\n     };\n\n    class LazyImageComponent extends React.Component {\n      state = {\n        image: null,\n        ImageProvider: imageSources[this.props.src]\n      }\n\n      componentDidMount() {\n        if (!this.state.image) {\n          this.state.ImageProvider().then(c => {\n            this.setState({\n              image: c.default\n            });\n          });\n        }\n      }\n\n      render() {\n        let { image } = this.state;\n\n        return image && typeof image === 'object' ? (\n          <IdealImage\n            {...this.props}\n            className={makeClass('image', this.props.className)}\n            src={image.src.src}\n            width={image.src.width || image.width}\n            height={image.src.height || image.height}\n            placeholder={{ lqip: image.preSrc }}\n            srcSet={image.src.images\n              ? image.src.images.map(i => ({\n                  ...i,\n                  src: i.path\n                }))\n              : [{\n                  src: image.src,\n                  width: image.width\n                }]\n            }\n          />\n        ) : <img className={makeClass('image', this.props.className)} src={image} />;\n      }\n    }\n  \n      \n  const lazyComponent = provider =>\n    class extends React.Component {\n      static defaultProps = {\n        shouldLoad: true\n      };\n  \n      state = {\n        Comp: null\n      };\n  \n      componentDidMount() {\n        if (!this.state.Comp && this.props.shouldLoad) {\n          provider().then(c => {\n            this.setState({\n              Comp: c.default\n            });\n          });\n        }\n      }\n  \n      render() {\n        const { Comp } = this.state;\n        return Comp ? React.createElement(Comp, this.props, this.props.children || null) : null;\n      }\n    };\n\n\n      const Gist = lazyComponent(() => import(/* webpackChunkName: \"plugin-embed\" */ 'react-gist'))\n      const TweetEmbed = lazyComponent(() => import(/* webpackChunkName: \"plugin-embed\" */ 'react-tweet-embed'))\n    \n      \n    const markDownPage = props => (\n      <div className={props.className}>\n        <section>\n          <h1><code>shipit</code></h1>\n<p>Context aware publishing.</p>\n<ol>\n<li>call from base branch -&gt; latest version released (LATEST)</li>\n<li>call from prerelease branch -&gt; prerelease version released (NEXT)</li>\n<li>call from PR in CI -&gt; canary version released (CANARY)</li>\n<li>call locally when not on base/prerelease branch -&gt; canary version released (CANARY)</li>\n</ol>\n<h2 id=\"options\">Options <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#options\" aria-hidden=\"true\"></Link></h2>\n<table>\n<thead>\n<tr>\n<th>Flag</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>--name</code></td>\n<td>String</td>\n<td>Git name to commit  with. Defaults to package definition for the platform</td>\n</tr>\n<tr>\n<td><code>--email</code></td>\n<td>String</td>\n<td>Git email to commit with. Defaults to package definition for the platform</td>\n</tr>\n<tr>\n<td><code>--only-publish-with-release-label</code></td>\n<td>Boolean</td>\n<td>Only bump version if 'release' label is on pull request</td>\n</tr>\n<tr>\n<td><code>--base-branch</code></td>\n<td>String</td>\n<td>Branch to treat as the &quot;master&quot; branch</td>\n</tr>\n<tr>\n<td><code>--dry-run</code>, <code>-d</code></td>\n<td>Boolean</td>\n<td>Report what command will do but do not actually do anything</td>\n</tr>\n<tr>\n<td><code>--no-version-prefix</code></td>\n<td>Boolean</td>\n<td>Use the version as the tag without the 'v' prefix. WARNING: some plugins might need extra config to use this option (ex: npm)</td>\n</tr>\n<tr>\n<td><code>--prerelease</code></td>\n<td>Boolean</td>\n<td>Publish a prerelease on GitHub.</td>\n</tr>\n<tr>\n<td><code>--title</code></td>\n<td>String</td>\n<td>Override the title used in the addition to the CHANGELOG.md.</td>\n</tr>\n<tr>\n<td><code>--message</code>, <code>-m</code></td>\n<td>String</td>\n<td>Message to commit the changelog with. Defaults to 'Update CHANGELOG.md [skip ci]'</td>\n</tr>\n<tr>\n<td><code>--quiet</code>, <code>-q</code></td>\n<td>Boolean</td>\n<td>Print <strong>only</strong> the result of the command</td>\n</tr>\n<tr>\n<td><code>--only-graduate-with-release-label</code></td>\n<td>Boolean</td>\n<td>Make auto publish prerelease versions when merging to master. Only PRs merged with &quot;release&quot; label will generate a &quot;latest&quot; release. Only use this flag if you do not want to maintain a prerelease branch, and instead only want to use master.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"examples\">Examples <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#examples\" aria-hidden=\"true\"></Link></h2>\n<pre><code className=\"language-sh\">auto shipit<br /></code></pre>\n<h2 id=\"configurable-options\">Configurable Options <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#configurable-options\" aria-hidden=\"true\"></Link></h2>\n<p>You can configure some of the options for the <code>shipit</code> command in the <code>.autorc</code>.</p>\n<ul>\n<li><code>prerelease</code></li>\n<li><code>message</code></li>\n<li><code>only-graduate-with-release-label</code></li>\n</ul>\n<p><strong>Example <code>.autorc</code>:</strong></p>\n<pre><code className=\"language-json\">&#123;<br />  <span className=\"hljs-attr\">\"shipit\"</span>: &#123;<br />    <span className=\"hljs-attr\">\"prerelease\"</span>: <span className=\"hljs-literal\">true</span>,<br />    <span className=\"hljs-attr\">\"message\"</span>: <span className=\"hljs-string\">\"string\"</span>,<br />    <span className=\"hljs-attr\">\"only-graduate-with-release-label\"</span>: <span className=\"hljs-literal\">true</span><br />  &#125;<br />&#125;<br /></code></pre>\n<h2 id=\"release-pipeline\">Release Pipeline <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#release-pipeline\" aria-hidden=\"true\"></Link></h2>\n<p>Below is the basics steps auto takes when releasing your code through the <code>shipit</code> command.</p>\n<p><LazyImageComponent src=\"../../images/default-auto.png\" alt=\"The default shipit workflow\" /></p>\n<p>You can customize how this pipeline operates with various flags.\nThe following shows how those flags can effect the workflow.</p>\n<p><LazyImageComponent src=\"../../images/complete-auto.png\" alt=\"The entire shipit workflow\" /></p>\n<h2 id=\"managing-old-major-versions\">Managing Old Major Versions <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#managing-old-major-versions\" aria-hidden=\"true\"></Link></h2>\n<p>This command also has the ability to help you manage old major versions too!\nThis feature is off by default, to enable set <code>versionBranches</code> to <code>true</code> in your <Link currentPage={(this && this.props || props).currentPage} to=\"/auto/pages/autorc.html#versionbranches\">.autorc</Link>.</p>\n<p>With this feature enabled <code>auto shipit</code> will:</p>\n<ul>\n<li>Create a version branch when a <code>major</code> happens (prefixed with <code>version-</code>)</li>\n<li>When ran from a <code>versionBranch</code> make a release to that version</li>\n</ul>\n<p>Now that you have a branch for an old major release, it is super easy to release patches to it!\nPeople can make PRs to the the <code>version-</code> branch and once merged create a new release of that version.</p>\n<h3 id=\"customize-branch-prefix\">Customize Branch Prefix <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#customize-branch-prefix\" aria-hidden=\"true\"></Link></h3>\n<p>You can customize what the branch names will be by setting <code>versionBranches</code> to a string.</p>\n<pre><code className=\"language-json\">&#123;<br />  <span className=\"hljs-attr\">\"versionBranches\"</span>: <span className=\"hljs-string\">\"Major-\"</span><br />&#125;<br /></code></pre>\n<h2 id=\"prereleases\">Prereleases <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#prereleases\" aria-hidden=\"true\"></Link></h2>\n<p>If you are interested in pre-releases (ex: <code>alpha</code>, <code>beta</code>, <code>next</code>) <code>auto</code> has the ability to publish pre-releases in various ways.</p>\n<p>Read more about preparing you project for pre-releases <Link currentPage={(this && this.props || props).currentPage} to=\"/auto/pages/generated/next.html#setting-up-protected-branches\">here</Link>.</p>\n<h3 id=\"strategies\">Strategies <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#strategies\" aria-hidden=\"true\"></Link></h3>\n<h4 id=\"%22next%22-branch-(default)\">&quot;next&quot; Branch (default) <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#%22next%22-branch-(default)\" aria-hidden=\"true\"></Link></h4>\n<p>The suggested way to create pre-releases is by managing 2 branches for your repo: <code>master</code> and <code>next</code>.\n<code>master</code> contains the <code>latest</code> stable version of the code, and <code>next</code> contains future updates.</p>\n<p>You can change what branches <code>auto</code> treats as pre-release branches in your <Link currentPage={(this && this.props || props).currentPage} to=\"/auto/pages/autorc.html#prerelease-branches\"><code>.autorc</code></Link>.</p>\n<p><LazyImageComponent src=\"../../images/next-branch.png\" alt=\"Example git tree\" /></p>\n<p>To update the <code>latest</code> stable version simply merge your pre-release branch into your <code>baseBranch</code>.</p>\n<h4 id=\"without-%22next%22-branch-(--only-graduate-with-release-label)\">Without &quot;next&quot; Branch (<code>--only-graduate-with-release-label</code>) <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#without-%22next%22-branch-(--only-graduate-with-release-label)\" aria-hidden=\"true\"></Link></h4>\n<p>If you use the <code>--only-graduate-with-release-label</code> flag, you do not have to manage 2 branches.\nInstead you only have a <code>baseBranch</code> and do all work and pull requests there.\n<code>auto</code> will only publish pre-releases when PRs are merged.\nTo update the <code>latest</code> stable version add the <code>released</code> label to the PR.</p>\n<p>While this setup may be simpler, it restricts you from updating latest while development is happening for the pre-release.\nWith 2 branches you can easily merge update to the latest release, with 1 this is not possible.</p>\n<h4 id=\"multiple-%22next%22-branches\">Multiple &quot;next&quot; Branches <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#multiple-%22next%22-branches\" aria-hidden=\"true\"></Link></h4>\n<p>Sometimes you might want to have more rigorous release lines.\nThis can help test out bugs on a smaller set of users.</p>\n<p>One setup you could use to accomplish this is by creating 3 <code>prereleaseBranches</code></p>\n<pre><code className=\"language-json\">&#123;<br />  <span className=\"hljs-attr\">\"prereleaseBranches\"</span>: [<span className=\"hljs-string\">\"alpha\"</span>, <span className=\"hljs-string\">\"beta\"</span>, <span className=\"hljs-string\">\"rc\"</span>]<br />&#125;<br /></code></pre>\n<p>You could then set you default to <code>alpha</code> and <code>auto</code> would publish updates merged to that branch under the <code>alpha</code> release tag.\nWhen you are ready for the update to get used by more users just merge <code>alpha</code> into <code>beta</code>.\nThis will publish a <code>beta</code> release to the matching release tag.\nRepeat this same process when graduating to <code>rc</code> or <code>latest</code>.</p>\n<h4 id=\"feature-pre-releases\">Feature Pre-releases <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#feature-pre-releases\" aria-hidden=\"true\"></Link></h4>\n<p>Sometimes you are working on a large feature that requires a lot of work.\nInstead of making a giant PR with a bunch of updates, you can create a <code>prereleaseBranch</code> to track the work.</p>\n<pre><code className=\"language-json\">&#123;<br />  <span className=\"hljs-attr\">\"prereleaseBranches\"</span>: [<span className=\"hljs-string\">\"next\"</span>, <span className=\"hljs-string\">\"my-cool-feature\"</span>]<br />&#125;<br /></code></pre>\n<p>Now instead of just getting a canary version when merging into the <code>my-cool-feature</code> branch, a prerelease version is published under the <code>my-cool-feature</code> release tag!\nThis enables other to consume just this line of work and enables your work to be more flexible.</p>\n\n        </section>\n      </div>\n    );\n\n    export default markDownPage;\n  \n    "],"sourceRoot":""}