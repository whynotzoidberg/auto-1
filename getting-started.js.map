{"version":3,"sources":["webpack:///./docs/pages/getting-started.md"],"names":["_path","_interopRequireDefault","__webpack_require__","_react","_interopRequireWildcard","Link","props","to","rest","_objectWithoutProperties","includes","default","createElement","_extends","href","path","join","onClick","e","preventDefault","location","URL","window","origin","history","pushState","Location","pathname","hash","query","getLocation","popStateEvent","CustomEvent","detail","dispatchEvent","defaultProps","lazyComponent","provider","_class","_temp","React","Component","[object Object]","args","super","_defineProperty","this","Comp","componentDidMount","state","shouldLoad","then","c","setState","render","children","bind","_jsx","className","_ref3","_ref4","_ref5","_ref6","_ref7","currentPage","target","_ref8","_ref9","_ref10","id","aria-hidden","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","_ref20","_ref21","_ref22","_ref23","_ref24","_ref25","_ref26","_ref27","_ref28","_ref29","_ref30","_ref31","_ref32","_ref33","_ref34","_ref35","_ref36","_ref37","_ref38","_ref39","_ref40","_ref41","_ref42","_ref43","_ref44","_ref45","_ref46","_ref47","_ref48","_ref49","_ref50","_ref51"],"mappings":"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","file":"getting-started.js","sourcesContent":["\n      \n      import path from 'path';\n      import React, { Component } from 'react';\n      import makeClass from 'classnames';\n\n      \n  import PropTypes from 'prop-types';\n\n  const getLocation = Location => ({\n    href: Location.href,\n    pathname: Location.pathname,\n    hash: Location.hash,\n    query: Location.query\n  });\n\n  const Link = props => {\n    let {to, ...rest} = props;\n\n    if (to.includes('http')) {\n      return <a {...props} href={to} />\n    }\n\n    if (to[0] === '#') {\n      to = path.join('/auto/','pages/getting-started.html') + to;\n    }\n\n    return (\n      <a\n        {...rest}\n        href={to}\n        onClick={e => {\n          e.preventDefault();\n\n          if (props.to === '#') {\n            return false;\n          }\n\n          const location = new URL(path.join(window.location.origin, to))\n\n          window.history.pushState(getLocation(location), null, to);\n          props.onClick();\n\n          const popStateEvent = new CustomEvent('changeLocation', { detail: location });\n          dispatchEvent(popStateEvent);\n\n          return false;\n        }}\n      />\n    );\n  };\n\n  Link.defaultProps = {\n    href: '',\n    onClick: () => {}\n  };\n\n  Link.propTypes = {\n    href: PropTypes.string,\n    onClick: PropTypes.func\n  }\n\n      \n  const PluginProvider = ({plugins, name, options, children, ...props}) => {\n    let Plugin = plugins[name];\n    const pluginOptions = Plugin.options;\n\n    if (!Plugin) {\n      return <div />;\n    }\n\n    Plugin = Plugin.component;\n    return (\n      <Plugin\n        {...pluginOptions} \n        options={options ? options.options : {}}\n        {...(options ? options.props : props)}\n        children={children}\n        plugins={plugins}\n      />\n    );\n  };\n\n      \n  class Details extends Component {\n    state = {\n      open: this.props.open\n    }\n\n    render() {\n      return (\n        <details open={this.state.open}>\n          {this.props.children}\n        </details>\n      )\n    }\n  };\n\n      \n      \n    import IdealImage from 'react-ideal-image';\n\n    const imageSources = {  };\n\n    class LazyImageComponent extends React.Component {\n      state = {\n        image: null,\n        ImageProvider: imageSources[this.props.src]\n      }\n\n      componentDidMount() {\n        if (!this.state.image) {\n          this.state.ImageProvider().then(c => {\n            this.setState({\n              image: c.default\n            });\n          });\n        }\n      }\n\n      render() {\n        let { image } = this.state;\n\n        return image && typeof image === 'object' ? (\n          <IdealImage\n            {...this.props}\n            className={makeClass('image', this.props.className)}\n            src={image.src.src}\n            width={image.src.width || image.width}\n            height={image.src.height || image.height}\n            placeholder={{ lqip: image.preSrc }}\n            srcSet={image.src.images\n              ? image.src.images.map(i => ({\n                  ...i,\n                  src: i.path\n                }))\n              : [{\n                  src: image.src,\n                  width: image.width\n                }]\n            }\n          />\n        ) : <img className={makeClass('image', this.props.className)} src={image} />;\n      }\n    }\n  \n      \n  const lazyComponent = provider =>\n    class extends React.Component {\n      static defaultProps = {\n        shouldLoad: true\n      };\n  \n      state = {\n        Comp: null\n      };\n  \n      componentDidMount() {\n        if (!this.state.Comp && this.props.shouldLoad) {\n          provider().then(c => {\n            this.setState({\n              Comp: c.default\n            });\n          });\n        }\n      }\n  \n      render() {\n        const { Comp } = this.state;\n        return Comp ? React.createElement(Comp, this.props, this.props.children || null) : null;\n      }\n    };\n\n\n      const Gist = lazyComponent(() => import(/* webpackChunkName: \"plugin-embed\" */ 'react-gist'))\n      const TweetEmbed = lazyComponent(() => import(/* webpackChunkName: \"plugin-embed\" */ 'react-tweet-embed'))\n    \n      \n    const markDownPage = props => (\n      <div className={props.className}>\n        <section>\n          <h1>Getting Started</h1>\n<p>Before we do anything we must first install <code>auto</code> as a dev dependency.</p>\n<pre><code className=\"language-sh\">yarn add -D auto<br /></code></pre>\n<p>If you are using <code>auto</code> in a non-javascript project, you can install <code>auto</code> and all it's official plugins via the <Link currentPage={(this && this.props || props).currentPage} target=\"_blank\" to=\"https://github.com/intuit/auto/releases\" className=\"external-link\">releases</Link> page. Here you will find a build of <code>auto</code> for all major OSes. This build has <code>node</code> bundled so you don't need it installed!</p>\n\n        <article className=\"message column is-warning\">\n          \n          <div className=\"message-body\">\n      <p>⚠️ If you use <code>yarn@2</code> none of the default plugins (<code>npm</code> and <code>released</code>) are included so you must install them if you want to use them.</p>\n\n        </div>\n      </article>\n    <h2 id=\"help\">Help <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#help\" aria-hidden=\"true\"></Link></h2>\n<p>To get detailed help for any command use the <code>--help</code> flag.</p>\n<pre><code className=\"language-sh\">auto --<span className=\"hljs-built_in\">help</span><br /><span className=\"hljs-comment\"># or command help</span><br />auto comment --<span className=\"hljs-built_in\">help</span><br /></code></pre>\n<h3 id=\"make-%22latest-release%22\">Make &quot;Latest Release&quot; <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#make-%22latest-release%22\" aria-hidden=\"true\"></Link></h3>\n<p>If your project is already published then you need to make sure that your last release is tagged and that it's the <code>Latest Release</code> on GitHub.</p>\n<p>To tag your last release find that last commit where you bumped the version and run the following commands with your version number.</p>\n<pre><code className=\"language-sh\">git tag v1.2.3<br />git push --tags<br /></code></pre>\n<p>Then on GitHub go to your project's releases and click <code>Draft a new release</code>. In the <code>Tag version</code> field enter the version number you just tagged and click <code>Publish release</code>.</p>\n<p>Now your github project is set up to use <code>auto</code>.</p>\n<h2 id=\"configuration\">Configuration <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#configuration\" aria-hidden=\"true\"></Link></h2>\n<p>Getting started with <code>auto</code> is super easy.</p>\n<ol>\n<li><code>auto init</code> (optional)</li>\n<li>Configure environment variables</li>\n<li><code>auto create-labels</code></li>\n<li>Set up script</li>\n</ol>\n<h3 id=\"1.-initialize-options\">1. Initialize Options <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#1.-initialize-options\" aria-hidden=\"true\"></Link></h3>\n<p>Initialize the bare minimum options and a few other optional things.\nThis will set you up locally but you will still have to configure environment variables in your CI.</p>\n<ul>\n<li>Override default labels</li>\n<li>Add additional labels</li>\n<li>Add plugins</li>\n<li>Creates an .env file for local testing</li>\n</ul>\n<h3 id=\"2.-environment-variables\">2. Environment Variables <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#2.-environment-variables\" aria-hidden=\"true\"></Link></h3>\n<p>You must configure some environment variables for publishing and releasing to work properly.</p>\n<ul>\n<li><code>GH_TOKEN</code> - Used for publishing the GitHub release and creating labels (<Link currentPage={(this && this.props || props).currentPage} target=\"_blank\" to=\"https://github.com/settings/tokens\" className=\"external-link\">create one here</Link>) (needs <code>repo</code> permission)</li>\n<li><code>NPM_TOKEN</code> - Used to publish to npm. (only with NPM plugin)</li>\n</ul>\n\n        <article className=\"message column is-warning\">\n          \n          <div className=\"message-body\">\n      <p>Make sure you give the <code>GH_TOKEN</code> <code>repo</code> permission or <code>shipit</code> will fail!</p>\n\n        </div>\n      </article>\n    <h4 id=\"local-.env\">Local <code>.env</code> <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#local-.env\" aria-hidden=\"true\"></Link></h4>\n<p>You can also store these values in a local file at the root of your project named <code>.env</code>. You should make sure to add this file to your <code>.gitignore</code> so you don't commit any keys! These env vars will override these any variable already set on the process. This enables you to have a per project configuration that isn't effected by your global setup.</p>\n<p><strong><code>PROJECT_ROOT/.env</code>:</strong></p>\n<pre><code className=\"language-bash\">GH_TOKEN=YOUR_TOKEN<br />NPM_TOKEN=PUBLISH_TOKEN<br /></code></pre>\n<h4 id=\"http-proxy\">HTTP Proxy <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#http-proxy\" aria-hidden=\"true\"></Link></h4>\n<p>If you are running auto behind a <code>http</code> or <code>https</code> proxy, add either the <code>http_proxy</code> or <code>https_proxy</code> environment variable to your environment. To test locally add it to .env file. Remember this file is only local, so you will need to set the variable in your CI as well.</p>\n<pre><code className=\"language-bash\">https_proxy=&lt;PROXYHOST&gt;:&lt;PROXYPORT&gt;<br /></code></pre>\n<h3 id=\"3.-labels\">3. Labels <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#3.-labels\" aria-hidden=\"true\"></Link></h3>\n<p>After that, you need to set up the labels on your github project. The types of labels that <code>auto</code> uses are:</p>\n<ul>\n<li>Versioning Labels - used to calculate version numbers and make releases. To change them refer to <Link currentPage={(this && this.props || props).currentPage} to=\"/auto/pages/autorc.html#versioning-labels\">this</Link>.</li>\n<li>Changelog Labels - These labels do not effect the version calculation but they will change the section the PR displays in the changelog. These are customizable too, and you can even add your own sections. Read more <Link currentPage={(this && this.props || props).currentPage} to=\"/auto/pages/autorc.html#changelog-titles\">here</Link></li>\n</ul>\n<p>To create the labels for your project on GitHub, run the following command with your <code>GH_TOKEN</code>.</p>\n<pre><code className=\"language-sh\">GH_TOKEN=YOUR_TOKEN auto create-labels<br /><span className=\"hljs-comment\"># or with .env file</span><br />auto create-labels<br /></code></pre>\n<h3 id=\"4.-script\">4. Script <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#4.-script\" aria-hidden=\"true\"></Link></h3>\n<p><code>auto</code> is written so that each tool it exposes is useful in isolation. It also provides workflows for those who don't care about the Details of each tool and just want their code released.</p>\n<h4 id=\"quick-setup-(recommended)\">Quick Setup (Recommended) <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#quick-setup-(recommended)\" aria-hidden=\"true\"></Link></h4>\n<p>To version, changelog, publish and release your code all at the same time, we've included the <code>shipit</code> tool.\nThis tool runs all commands in the default <code>auto</code> workflow and puts it into one meta-command.\nIt is context aware and will make different type of releases based on where you run it.\n<Link currentPage={(this && this.props || props).currentPage} to=\"/auto/pages/generated/shipit.html\">Read more here.</Link></p>\n<pre><code className=\"language-json\">&#123;<br />  <span className=\"hljs-attr\">\"scripts\"</span>: &#123;<br />    <span className=\"hljs-attr\">\"release\"</span>: <span className=\"hljs-string\">\"auto shipit\"</span><br />  &#125;<br />&#125;<br /></code></pre>\n<h4 id=\"detailed-setup\">Detailed Setup <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#detailed-setup\" aria-hidden=\"true\"></Link></h4>\n<p>The simplest workflow to get set up in just the <code>package.json</code> is by adding the following to your <code>package.json</code>. With this setup your application will not be able to use the <code>skip-release</code> flag, but everything else will work just fine</p>\n<pre><code className=\"language-json\">&#123;<br />  <span className=\"hljs-attr\">\"scripts\"</span>: &#123;<br />    <span className=\"hljs-attr\">\"version\"</span>: <span className=\"hljs-string\">\"npm version &#96;auto version&#96; -m 'Bump version to: %s [skip ci]'\"</span>,<br />    <span className=\"hljs-attr\">\"publish\"</span>: <span className=\"hljs-string\">\"npm publish &amp;&amp; git push --follow-tags --set-upstream origin $branch\"</span>,<br />    <span className=\"hljs-attr\">\"release\"</span>: <span className=\"hljs-string\">\"auto changelog &amp;&amp; npm run version &amp;&amp; npm run publish &amp;&amp; auto release\"</span><br />  &#125;<br />&#125;<br /></code></pre>\n<h5 id=\"enabling-skip-release-label\">Enabling <code>skip-release</code> label <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#enabling-skip-release-label\" aria-hidden=\"true\"></Link></h5>\n<p>To use the <code>skip-release</code> label you have to get a little more involved and use a shell script. We could do the <code>if</code> checks in the <code>package.json</code>, but this would get messy and hard to read very quickly.</p>\n<pre><code className=\"language-json\">&#123;<br />  <span className=\"hljs-attr\">\"scripts\"</span>: &#123;<br />    <span className=\"hljs-attr\">\"release\"</span>: <span className=\"hljs-string\">\"./scripts/release.sh\"</span><br />  &#125;<br />&#125;<br /></code></pre>\n<p>Here is an example release script for a single NPM package:</p>\n<pre><code className=\"language-sh\"><span className=\"hljs-built_in\">export</span> PATH=$(npm bin):<span className=\"hljs-variable\">$PATH</span><br /><br />VERSION=&#96;auto version&#96;<br /><br /><span className=\"hljs-comment\">## Support for label 'skip-release'</span><br /><span className=\"hljs-keyword\">if</span> [ ! -z <span className=\"hljs-string\">\"<span className=\"hljs-variable\">$VERSION</span>\"</span> ]; <span className=\"hljs-keyword\">then</span><br />  <span className=\"hljs-comment\">## Update Changelog</span><br />  auto changelog<br /><br />  <span className=\"hljs-comment\">## Publish Package</span><br />  npm version <span className=\"hljs-variable\">$VERSION</span> -m <span className=\"hljs-string\">\"Bump version to: %s [skip ci]\"</span><br />  npm publish<br /><br />  <span className=\"hljs-comment\">## Create GitHub Release</span><br />  git push --follow-tags --<span className=\"hljs-built_in\">set</span>-upstream origin <span className=\"hljs-variable\">$branch</span><br />  auto release<br /><span className=\"hljs-keyword\">fi</span><br /></code></pre>\n<p>or if you are using lerna to manage a monorepo.</p>\n<pre><code className=\"language-sh\"><span className=\"hljs-built_in\">export</span> PATH=$(npm bin):<span className=\"hljs-variable\">$PATH</span><br /><br />VERSION=&#96;auto version&#96;<br /><br /><span className=\"hljs-keyword\">if</span> [ ! -z <span className=\"hljs-string\">\"<span className=\"hljs-variable\">$VERSION</span>\"</span> ]; <span className=\"hljs-keyword\">then</span><br />  auto changelog<br />  lerna publish --yes <span className=\"hljs-variable\">$VERSION</span> -m <span className=\"hljs-string\">'%v [skip ci]'</span><br />  auto release<br /><span className=\"hljs-keyword\">fi</span><br /></code></pre>\n<h2 id=\"enterprise\">Enterprise <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#enterprise\" aria-hidden=\"true\"></Link></h2>\n<p>If you are using enterprise github <code>auto</code> lets you configure the github API URL that it uses. You can configure this by using the CLI option <code>--github-api</code>, by setting the value in your <Link currentPage={(this && this.props || props).currentPage} to=\"/auto/pages/autorc.html#githubApi\">.autorc</Link>, or during <code>auto init</code>.</p>\n\n        </section>\n      </div>\n    );\n\n    export default markDownPage;\n  \n    "],"sourceRoot":""}